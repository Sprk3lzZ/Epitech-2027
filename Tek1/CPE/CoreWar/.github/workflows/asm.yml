env:
  EXECUTABLE_NAME: "asm/asm"
  NAME: "asm"
  AUTHORIZED_FUNCTIONS: "fopen,open,fread,read,fwrite,write,getline,lseek,fseek,fclose,close,malloc,realloc,free,exit,write"
  LIBS_TO_CHECK: "GLIBC"

name: Build & Test Asm

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  check-useless-files:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check useless files
        run: |
          ERR=0
          for FILE in $(find . -type f -name "*.o" -o -name "*~" -o -name "*.a" -o -name "*.gc*" -o -name "*#*#"); do
              echo "::error file=$FILE::File $FILE is not allowed"
              ERR=1
          done
          exit $ERR
  check-coding-style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs:
      - check-useless-files
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check coding style
        run: /usr/local/bin/check.sh $(pwd) $(pwd)
      - name: Annotate coding-style errors
        run: |
          has_errors=0
          while IFS= read -r line; do
              filename=$(echo "$line" | cut -d':' -f1)
              line_pos=$(echo "$line" | cut -d':' -f2)
              severity=$(echo "$line" | cut -d':' -f3 | sed -e 's/^[[:space:]]*//')
              type=$(echo "$line" | cut -d':' -f4)
              if [[ $severity == illegal* ]]; then
                  continue
              fi
              echo "::error file=$filename,line=$line_pos,title=$severity $type::$severity: $type at $filename:$line_pos"
              has_errors=1
          done < coding-style-reports.log

          if [ $has_errors -eq 1 ]; then
              echo "There are coding style errors!"
              exit 1
          fi
  check-cleanability:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Check cleanability
        run: |
          INIT_TREE=$(tree -a --charset=ascii)
          make all fclean
          FINAL_TREE=$(tree -a --charset=ascii)
          if [[ "$INIT_TREE" != "$FINAL_TREE" ]]; then
              echo "::error::Makefile is not cleanable"
              exit 1
          fi
  build:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    continue-on-error: false
    needs:
      - check-useless-files
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: make
      - name: Check executable
        run: ls -l ./$EXECUTABLE_NAME
      - name: Publish artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME }}
          path: ./${{ env.EXECUTABLE_NAME }}
  check-banned-functions:
    runs-on: ubuntu-latest
    continue-on-error: ${{ github.event.pull_request.base.ref != 'main' }}
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.NAME }}
      - name: Check banned functions
        run: |
          echo "Checking banned functions"
          FUNCS=$(nm -g ./${{ env.NAME }})
          ERR=0
          while IFS= read -r line; do
              TYPE=$(tr -s ' ' <<< "$line" | cut -d ' ' -f 2)
              if [[ "$TYPE" != "U" && "$TYPE" != "u" ]]; then
                  continue
              fi
              FUNC=$(tr -s ' ' <<< "$line" | cut -d ' ' -f 3)
              LIB=$(cut -d '@' -f 2 <<< "$FUNC")
              FUNC_NAME=$(cut -d '@' -f 1 <<< "$FUNC")
              if [[ "$FUNC_NAME" == "_"* ]]; then
                  continue
              fi
              echo "Detected function $FUNC_NAME in library $LIB"
              AUTHORIZED=0
              for L in $(echo ${{ env.LIBS_TO_CHECK }} | tr "," " "); do
                  if [[ "$LIB" == "$L"* ]]; then
                      for F in $(echo ${{ env.AUTHORIZED_FUNCTIONS }} | tr "," " "); do
                          if [[ "$FUNC_NAME" == "$F" ]]; then
                              AUTHORIZED=1
                              break 2
                          fi
                      done
                  fi
              done
              if [[ "$AUTHORIZED" == "0" ]]; then
                  echo "::error::Function $FUNC_NAME in library $LIB is not authorized"
                  ERR=1
              fi
          done <<< "$FUNCS"
          exit $ERR
  run-asm-tester:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Build
        run: make
      - name: Run ASM Checker
        run: |
          cd tests/asm
          ./tester.sh
